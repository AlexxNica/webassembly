{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "node_modules/@protobufjs/inquire/index.js",
    "src"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACj
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n",
    "\"use strict\";\r\nvar webassembly = exports;\r\n\r\nif (typeof window !== \"undefined\" && window)\r\n    window.webassembly = webassembly;\r\n\r\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\r\n\r\n/**\r\n * Options as used by {@link load}.\r\n * @interface LoadOptions\r\n * @property {number} [initialMemory=1] Initial memory in pages of 64k\r\n * @property {number} [maximumMemory] Maximum memory in pages of 64k\r\n * @property {Object.<string,*>} [imports] Imports\r\n */\r\n\r\n/**\r\n * Instantiated module as returned by {@link load},\r\n * @interface IModule\r\n * @property {Object.<string,*>} env Environment\r\n * @property {Object.<string,*>} exports Exports\r\n */\r\n\r\n/**\r\n * Loads an assembly.\r\n * @param {string} file File name (.wasm)\r\n * @param {LoadOptions} [options] Options\r\n * @returns {Promise.<IModule>} Promise resolving to the instantiated module\r\n */\r\nfunction load(file, options) {\r\n\r\n    if (!options)\r\n        options = {};\r\n\r\n    var imports = options.imports || {};\r\n\r\n    // Initialize memory\r\n\r\n    var memory = imports.memory;\r\n    if (!memory) {\r\n        var opts = { initial: options.initialMemory || 1 };\r\n        if (options.maximumMemory)\r\n            opts.maximum = options.maximumMemory;\r\n        memory = new WebAssembly.Memory(opts);\r\n    }\r\n\r\n    var table = imports.table;\r\n    if (!table)\r\n        table = new WebAssembly.Table({ initial: 0, element: \"anyfunc\" });\r\n\r\n    grow();\r\n\r\n    // Add utilty to memory\r\n\r\n    function getInt(ptr) {\r\n        return memory.S32[ptr >> 2];\r\n    }\r\n\r\n    memory.getInt = getInt;\r\n\r\n    function getUint(ptr) {\r\n        return memory.U32[ptr >> 2];\r\n    }\r\n\r\n    memory.getUint = getUint;\r\n\r\n    function getFloat(ptr) {\r\n        return memory.F32[ptr >> 2];\r\n    }\r\n\r\n    memory.getFloat = getFloat;\r\n\r\n    function getDouble(ptr) {\r\n        return memory.F64[ptr >> 3];\r\n    }\r\n\r\n    memory.getDouble = getDouble;\r\n\r\n    function getString(ptr) {\r\n        var start = (ptr >>>= 0);\r\n        while (memory.U8[ptr++]);\r\n        getString.bytes = ptr - start;\r\n        return String.fromCharCode.apply(null, memory.U8.subarray(start, ptr - 1));\r\n    }\r\n\r\n    memory.getString = getString;\r\n\r\n    // Initialize environment\r\n\r\n    var env = {};\r\n\r\n    env.memoryBase = imports.memoryBase || 0;\r\n    env.tableBase = imports.tableBase || 0;\r\n\r\n    env.memory = memory;\r\n    env.table = table;\r\n\r\n    function abort() {\r\n        throw Error(\"out of memory in \" + file);\r\n    }\r\n\r\n    env._abort = abort;\r\n\r\n    function grow() {\r\n        var buf = memory.buffer;\r\n        memory.U8  = new Uint8Array  (buf);\r\n        memory.S32 = new Int32Array  (buf);\r\n        memory.U32 = new Uint32Array (buf);\r\n        memory.F32 = new Float32Array(buf);\r\n        memory.F64 = new Float64Array(buf);\r\n    }\r\n\r\n    env._grow = grow;\r\n\r\n    // Add console to environment\r\n\r\n    getOwnPropertyNames(console).forEach(function(key) {\r\n        if (typeof console[key] === \"function\") // eslint-disable-line no-console\r\n            env[\"console_\" + key] = function(ptr, base) {\r\n                var s = getString(ptr);\r\n                if (base)\r\n                    s = s.replace(/%([dfisu])/g, function($0, $1) {\r\n                        var value;\r\n                        switch ($1) {\r\n                            case \"d\":\r\n                                value = getDouble(base);\r\n                                base += 4;\r\n                                break;\r\n                            case \"f\":\r\n                                value = getFloat(base);\r\n                                break;\r\n                            case \"i\":\r\n                                value = getInt(base);\r\n                                break;\r\n                            case \"s\":\r\n                                value = getString(getUint(base));\r\n                                break;\r\n                            case \"u\":\r\n                                value = getUint(base);\r\n                                break;\r\n                        }\r\n                        base += 4;\r\n                        return value;\r\n                    });\r\n                return console[key](s); // eslint-disable-line no-console\r\n            };\r\n    });\r\n\r\n    // Add Math to environment\r\n\r\n    getOwnPropertyNames(Math).forEach(function(key) {\r\n        if (typeof Math[key] === \"function\")\r\n            env[\"Math_\" + key] = function() {\r\n                var args = new Array(arguments.length),\r\n                    index = 0;\r\n                while (index < args.length)\r\n                    args[index] = arguments[index++];\r\n                return Math[key].apply(Math, args);\r\n            }\r\n    });\r\n\r\n    // Add imports to environment\r\n\r\n    for (var i = 0, ks = Object.keys(imports); i < ks.length; ++i)\r\n        env[ks[i]] = imports[ks[i]];\r\n\r\n    // Fetch the assembly and instantiate it\r\n\r\n    return (typeof fetch === \"function\" ? fetch : fetch_node)(file)\r\n        .then(function(result) { return result.arrayBuffer() })\r\n        .then(function(buffer) { return WebAssembly.instantiate(buffer, { env: env }) })\r\n        .then(function(module) {\r\n            var cexports = module.instance.exports,\r\n                exports = {};\r\n            for (var i = 0, ks = getOwnPropertyNames(cexports); i < ks.length; )\r\n                exports[ks[i]] = cexports[ks[i++]];\r\n            env.stackmax = memory.U32[1] + 4;\r\n            return {\r\n                env: env,\r\n                memory: memory,\r\n                exports: exports\r\n            };\r\n        });\r\n}\r\n\r\nwebassembly.load = load;\r\n\r\nvar fs = require(1)(\"fs\");\r\n\r\n// internal\r\nfunction fetch_node(file) {\r\n    return new Promise(function(resolve, reject) {\r\n        fs.readFile(file, function(err, data) {\r\n            if (err)\r\n                reject(err);\r\n            else\r\n                resolve({\r\n                    arrayBuffer: function() {\r\n                        return data;\r\n                    }\r\n                });\r\n        });\r\n    });\r\n}\r\n"
  ]
}